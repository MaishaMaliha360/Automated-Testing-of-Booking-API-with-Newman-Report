{
	"info": {
		"_postman_id": "82e8c4f4-ae08-4b13-bd85-a0cc2f108ca6",
		"name": "Batch24",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28052536",
		"_collection_link": "https://winter-firefly-262272.postman.co/workspace/Batch-24~7beef7e2-62a3-46b5-a0ab-07b26cd6203f/collection/28052536-82e8c4f4-ae08-4b13-bd85-a0cc2f108ca6?action=share&source=collection_link&creator=28052536"
	},
	"item": [
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"id\", jsonData.bookingid)\r",
							"\r",
							"pm.test(\"Satus code is 200\", function(){\r",
							"    pm.response.to.have.status(200);})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstName)\r",
							"pm.environment.set(\"firstName\", firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastName)\r",
							"pm.environment.set(\"lastName\", lastName)\r",
							"\r",
							"\r",
							"//Date\r",
							"const date = require('moment')\r",
							"const today = date()\r",
							"\r",
							"\r",
							"//for future date\r",
							"var checkin = today.add(5,'d').format(\"YYYY-MM-DD\")\r",
							"//console.log(checkin)\r",
							"\r",
							"//for previous date\r",
							"//var checkinPast = today.subtract(5,'d').format(\"YYYY-MM-DD\")\r",
							"//console.log(checkinPast)\r",
							"pm.environment.set(\"checkin\", checkin)\r",
							"\r",
							"var checkout = today.add(5,'d').format(\"YYYY-MM-DD\")\r",
							"pm.environment.set(\"checkout\", checkout)\r",
							"\r",
							"\r",
							"var additionalneeds = pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")\r",
							"console.log(additionalneeds)\r",
							"pm.environment.set(\"additionalneeds\", additionalneeds)\r",
							"\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(totalprice)\r",
							"pm.environment.set(\"totalprice\", totalprice)\r",
							"\r",
							"var depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(depositpaid)\r",
							"pm.environment.set(\"dePositpaid\", depositpaid)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : \"{{totalprice}}\",\r\n\t\"depositpaid\" : {{dePositpaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/booking/",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseCode = pm.response.code\r",
							"\r",
							"console.log(responseCode)\r",
							"\r",
							"if(responseCode==200){\r",
							"\r",
							"    var jsonData = pm.response.json()\r",
							"pm.test(\"First Name Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"firstName\")).to.eql(jsonData.firstname)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Last Name Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"lastName\")).to.eql(jsonData.lastname)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"CheckIn Date Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"checkin\")).to.eql(jsonData.bookingdates.checkin)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"CheckOut Date Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"checkout\")).to.eql(jsonData.bookingdates.checkout)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Additional Needs Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"additionalneeds\")).to.eql(jsonData.additionalneeds)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Total Price Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"totalprice\")).to.eql(jsonData.totalprice.toString())\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Deposit Paid Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"dePositpaid\")).to.eql(jsonData.depositpaid.toString())\r",
							"\r",
							"})\r",
							"\r",
							"\r",
							"/*pm.test(\"Satus code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});*/\r",
							"\r",
							"\r",
							"}else if(responseCode==404){\r",
							"    pm.test(\"Not Found\")\r",
							"}else if(responseCode==500){\r",
							"    pm.test(\"Server Error\")\r",
							"}else{\r",
							"    pm.test(\"Something went wrong. Please check it\")\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/booking/{{id}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Access Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token)\r",
							"\r",
							"pm.test(\"Satus code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "token=db28e6fd9e2bbbd",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/auth",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstName)\r",
							"pm.environment.set(\"Update firstName\", firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastName)\r",
							"pm.environment.set(\"Update lastName\", lastName)\r",
							"\r",
							"\r",
							"//Date\r",
							"const date = require('moment')\r",
							"const today = date()\r",
							"\r",
							"\r",
							"//for future date\r",
							"var checkin = today.add(5,'d').format(\"YYYY-MM-DD\")\r",
							"//console.log(checkin)\r",
							"\r",
							"//for previous date\r",
							"//var checkinPast = today.subtract(5,'d').format(\"YYYY-MM-DD\")\r",
							"//console.log(checkinPast)\r",
							"pm.environment.set(\"Update checkin\", checkin)\r",
							"\r",
							"var checkout = today.add(5,'d').format(\"YYYY-MM-DD\")\r",
							"pm.environment.set(\"Update checkout\", checkout)\r",
							"\r",
							"\r",
							"var additionalneeds = pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")\r",
							"console.log(additionalneeds)\r",
							"pm.environment.set(\"Update additionalneeds\", additionalneeds)\r",
							"\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(totalprice)\r",
							"pm.environment.set(\"Update totalprice\", totalprice)\r",
							"\r",
							"var depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(depositpaid)\r",
							"pm.environment.set(\"Update depositpaid\", depositpaid)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{Update firstName}}\",\r\n\t\"lastname\" : \"{{Update lastName}}\",\r\n\t\"totalprice\" : \"{{Update totalprice}}\",\r\n\t\"depositpaid\" : {{Update depositpaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{Update checkin}}\",\r\n    \t\"checkout\" : \"{{Update checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{Update additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/booking/{{id}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseCode = pm.response.code\r",
							"\r",
							"console.log(responseCode)\r",
							"\r",
							"if(responseCode==200){\r",
							"\r",
							"    var jsonData = pm.response.json()\r",
							"pm.test(\"First Name Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"Update firstName\")).to.eql(jsonData.firstname)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Last Name Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"Update lastName\")).to.eql(jsonData.lastname)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"CheckIn Date Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"Update checkin\")).to.eql(jsonData.bookingdates.checkin)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"CheckOut Date Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"Update checkout\")).to.eql(jsonData.bookingdates.checkout)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Additional Needs Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"Update additionalneeds\")).to.eql(jsonData.additionalneeds)\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Total Price Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"Update totalprice\")).to.eql(jsonData.totalprice.toString())\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Deposit Paid Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"Update depositpaid\")).to.eql(jsonData.depositpaid.toString())\r",
							"\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Satus code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"}else if(responseCode==404){\r",
							"    pm.test(\"Not Found\")\r",
							"}else if(responseCode==500){\r",
							"    pm.test(\"Server Error\")\r",
							"}else{\r",
							"    pm.test(\"Something went wrong. Please check it\")\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/booking/{{id}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseurl}}/booking/{{id}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseCode = pm.response.code\r",
							"\r",
							"console.log(responseCode)\r",
							"\r",
							"if(responseCode==200){\r",
							"\r",
							"   \r",
							"}else if(responseCode==404){\r",
							"    pm.test(\"Delete Successful\")\r",
							"}else if(responseCode==500){\r",
							"    pm.test(\"Server Error\")\r",
							"}else{\r",
							"    pm.test(\"Something went wrong. Please check it\")\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/booking/{{id}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}